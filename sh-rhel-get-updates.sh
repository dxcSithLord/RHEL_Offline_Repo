#!/bin/bash
# Alistair AMABILE - 6th Jan 2022
# Based on work by Duncan MAYALL/Michael TOLCHER - 24 May 16 
#
#
# Downloads the latest versions of all the installed packages 
# and creates an GPG signed RPM repository ISO image that can be used to 
# update disconnected machines.
# By comparing what is installed, when the required updates, the updates
# and their reqeuired dependencies are downloaded.  If an update requires
# a new previouly not installed package, the update(s) are performed first
# and a subsequent call will be required, possibly after a reboot to make
# the ISO.
#
# Note- This script should only be used to download updates for systems
# that are convered by a valid support contract.
#
# This program is free software you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later revision.
#
# 2021-Apr-26	AA	Updated to use arrays that simplifies the download
#			code, as the whole array can be passed to 
#                       yumdownloader, which can then multi-task and show
#                       progress.
# 2022-Jan-06   AA	Update the install script to use the created repo
#			on the media, fixed bug with testdepend.
# 2022-Jan-07	AA	change mount location from /media/dvd to /media/cdrom.
#                   TODO - make this an optional parameter.

# List of dependancies for this script to run
set -a _DEPEND_ON
_DEPEND_ON=( yumdownloader genisoimage createrepo )
# these can be installed with:
# yum install yum-utils genisoimage 

_continue() {
  while true; do
    read -r -p "$@ (y/N): " _confirm
    case $_confirm in
      [yY][eE][sS]|[yY]) break;; # Y/Yes - break out of loop and continue
      [Nn][Oo]|[Nn]) exit;;      # N/No - exit
      "") exit;;                 # Default - Exit
      *) ;;                      # Otherwise - Try again...
    esac
  done
}
#
#
#
_quit() {
  echo
  exit 1
}
#############################################
# Test the script dependencies are installed 
# Globals:
#  _DEPEND_ON - list of commands
#
# Arguments:
#   None
#############################################
_testdepend() {
  local -i oops=0
  for xdep in "${_DEPEND_ON[@]}"; do
    if ! command -v "${xdep}" > /dev/null 2>&2 ; then
      echo "${xdep} command required, but not installed"
      (( oops += 1 ))
    fi
  done
  return ${oops}
}

#############################################
# Create a new repo from the contents of $1
# Globals:
#  None
#
# Arguments:
#   path to repo
#############################################
_makerepo() {
  sudo createrepo -v $1
}
#############################################
# Create a new repo from the contents of $1
# Globals:
#  None
#
# Arguments:
#   path to repo
#############################################
_makeinstall() {
  local instfile
  instfile=$1
  echo
  # --Display Packages that have failed to download - if any
  # -- Create install script
  echo "  Create Install script."
  if echo "#/bin/bash" >  $instfile; then
    cat >> $instfile <<-'EOF'
  #
  #-- install - Alistair AMABILE - 6th Jan 2022
  #-- Based on work by Duncan MAYALL/Michael TOLCHER - 24 May 16 
  #
  # DO NOT MODIFY autogenerated script created by $(basename $0).
  set -a resarr
  _target="/media/cdrom"
  _path=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
  mountpoint -q "$_target"
  if [[ $? == 0 ]]; then 
  # TODO - update script to add RPM GPG (promtped),
  # TODO - include makedvdrepo to make this source a repo directo from DVD
  # TODO - Create an exclude packages file so that yum doesn't touch them.  May be empty
	echo $_target $_path 
	if [[ "$_path" == "$_target" ]]; then
	  # Check for updated kernel and install that first
	  # Check for centos/redhat/fedora instance for default repo to use
	  case $(grep -E "^ID=" /etc/os-release | cut -f2 -d'"' ) in
		"centos") 
		   medrep="c7-media"
		   ;;
		"redhat")
		   medrep="rhel-media"
		   ;;
		"*")
		   medrep="rhel-media"
		   ;;
	  esac
	  sudo yum --assumeyes \
			   --disablerepo=* \
			   --enablerepo=${medrep} \
			   list kernel \
		   | grep -Pz "Available Packages([.|\n]+kernel)"
	  resarr=( ${PIPESTATUS[@]} )
	  # if kernel is available, install that (can't update kernel, only install)
	  if [[ ${resarr[-1]} == 0 ]]; then
		 sudo yum --assumeyes \
			  --disablerepo=* \
			  --enablerepo=${medrep} \
			  install kernel \
			   kernel-tools \
			   kernel-tools-libs
		  if [[ $? == 0 ]]; then
			 echo "Kernel updates - applying updates"
		  else
		  echo "Kernel update error - please check"
		  exit 1
		  fi
	  fi
	  sudo yum --assumeyes \
			--disablerepo=* \
			--enablerepo=${medrep} \
			update  

	else
	  echo "Script must be run in $_target."
	fi
  else
	echo "$_target not mounted." 
  fi
  #
  # 
EOF
  else
    echo "Unable to write to $instfile"
  fi
  # -- Make install script execuable
  chmod ug+x $instfile
}

trap '_quit' SIGINT
#
_dest="/data/repo/"
_filter=
_reponame="pedvt"
#
#
#
_testdepend
  if [[ $? == 0 ]]; then
    # -- Confirm that user wants to proceed
    echo
    echo "Note - It can take a couple of hours or more to download all the updated"
    echo "packages."
    echo
    _continue "Do you want to continue?"
    echo "Please wait..."
    # -- Update package database.
    sudo yum -d 0 makecache || (echo "$basename $0): Failed to update package cache."; exit 1)
    # -- Check for required packages.
    #_excluded=
    #
    # get installed software list
    #
    sudo rpm -q -a --qf '%{Name}.%-7{arch}\n' | \
        egrep -v -e 'MFEcmd.i686|MFErt.i686|McAfeeVSEForLinux.noarch|gpg-pubkey.(none)' | \
        sed 's/ *$//' | \
        sort -u > installed.list 
    #
    # get software updates list
    #
    sudo yum list updates -d0 | \
        sed '1,2d' | \
        cut -f 1 -d ' ' | \
        grep -v "Updated" | \
        sort -u > updates.list 
    #
    # _required packages - not in installed and not in both - hence new
    #
    set -a _required
    _required=( $(comm -13 installed.list updates.list ) )
    #
    if ((  ${#_required[@]} == 0 )); then
      # -- Create folder for updates
      echo "  Creating temporary folder for updates."
      sudo rm -rf $_dest # > /dev/null 2>&1
      sudo mkdir -p $_dest/updates # > /dev/null 2>&1
      sudo chmod -R g+rwX $_dest 
      sudo chgrp -R wheel $_dest
      echo "  Getting installed packages."
      #
      # -- Get list of installed packages to be upgraded.
      #
      set -a _installed
      _installed=( $(comm -2  installed.list updates.list ) )
      #
      # -- Get list of installed packages that should be skipped (owing to unmet dependancies)
      # -- same as required, so should be empty on econd pass
      #
      set -a _skipped
      _skipped=( $(comm -13 installed.list updates.list ) ) #
      
      # -- Download updated packages
      _message="  Attempting to download $( echo $_installed | wc -w ) packages."
      _position=1
      _width=$(tput cols)
      echo "$_message"
      _failed=""
      trap '_quit' SIGINT
# TODO - update gpg keys from repositories when they expire naturally
# TODO - ADD GPG signatures for dependancies from external repositories
# TODO - Add repo exclusions here?
# TODO - Option to load from file the list of packages to download
#
      if ! yumdownloader -d 2 \
                         --destdir=$_dest/updates \
                         --assumeyes \
                         --resolve ${_installed[@]} != 0; then
        echo "Download error"
        exit 1
      else
        _makerepo $_dest
         gpg --detach-sign --armor $1/repodata/repomd.xml
#        cat <<eof >> $_dest/${_reponame}.xml
#eof
      fi 
 
     _makeinstall $_dest/install.sh

      # -- Write ISO image
      genisoimage -f -J -joliet-long -r -allow-lowercase -allow-multidot \
        -o $_dest/`(date +%Y%m%d%H%M)`-patch-cd.iso $_dest > /dev/null 2>&1 \
        || (echo "$(basename $0): Write Failed": exit 1)
      #-- Remove temporary file and update folder
      echo "Deleting temporary files."
      # rm -rf $_dest/updates 2&> /dev/null
    else
      echo "  Following packages need updating:"
      for _package in $_required; do
        echo "    $_package"
      done
      _continue "Do you want to upgrade these packages?" 
      echo "  Upgrading...(Run again to generate new iso with upgrades)"
      yum -y upgrade $_required
    fi
  else
    echo "$(basename $0): Required commands not installed - aborting."
  fi
